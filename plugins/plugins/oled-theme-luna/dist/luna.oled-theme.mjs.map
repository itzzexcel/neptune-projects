{
  "version": 3,
  "sources": ["dynamicExternals:@luna/core", "../plugins/oled-theme-luna/src/index.ts"],
  "sourcesContent": ["\n\t\t\t\t\tmodule.exports = luna?.core?.modules?.[\"@luna/core\"];\n\t\t\t\t\tif (module.exports === undefined) throw new Error(\"Cannot find module @luna/core in luna.core.modules\");\n\t\t\t\t\t// Icky but it works\n\t\t\t\t\tluna.core.LunaPlugin.plugins[\"@luna/core\"]?.addDependant(luna.core.LunaPlugin.plugins[\"@luna/oled-theme\"]);\n\t\t\t\t", "import { LunaUnload, Tracer } from \"@luna/core\";\n\nexport const { trace, errSignal } = Tracer(\"[OLED Theme]\");\nerrSignal!._ = \"OLED Theme plugin error signal\";\n\nconst themeUrl = \"https://raw.githubusercontent.com/ItzzExcel/neptune-projects/refs/heads/main/themes/black-neptune-theme.css\";\n\nlet style: string | null;\nlet styleElement: HTMLStyleElement | null;\n\n// Functions in unloads are called when plugin is unloaded.\n// Used to clean up resources, even listener dispose etc should be added here\nexport const unloads = new Set<LunaUnload>();\n\nfunction ApplyCSS(style: string): HTMLStyleElement {\n    const styleElement = document.createElement(\"style\");\n    styleElement.type = \"text/css\";\n    if ((styleElement as any).styleSheet) (styleElement as any).styleSheet.cssText = style;\n    else styleElement.appendChild(document.createTextNode(style));\n\n    document.head.appendChild(styleElement);\n    return styleElement;\n}\n\nfunction CleanUpCSS() {\n    if (styleElement && styleElement.parentNode) {\n        styleElement.parentNode.removeChild(styleElement);\n    }\n}\n\nasync function HttpGet(url: string): Promise<string | null> {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const content = await response.text();\n        return content;\n    } catch (error) {\n        trace.msg.err(`Failed to fetch URL: ${(error as Error).message}`);\n        return null;\n    }\n}\n\n// Since HttpGet is async, we need to await its result\n(async () => {\n    style = await HttpGet(themeUrl);\n    if (style) {\n        styleElement = ApplyCSS(style);\n    }\n})();\n\n// Add cleanup function to unloads\nunloads.add(() => {\n    CleanUpCSS();\n    \n    const trackTitleElement = document.querySelector('div[class^=\"trackTitleContainer\"]');\n    if (trackTitleElement) {\n        // Note: DOMSubtreeModified is deprecated, but keeping for compatibility\n        // trackTitleElement.removeEventListener('DOMSubtreeModified', onTrackChanged);\n    }\n}); "],
  "mappings": "ygBAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CACKA,EAAO,QAAU,MAAM,MAAM,UAAU,YAAY,EACnD,GAAIA,EAAO,UAAY,OAAW,MAAM,IAAI,MAAM,oDAAoD,EAEtG,KAAK,KAAK,WAAW,QAAQ,YAAY,GAAG,aAAa,KAAK,KAAK,WAAW,QAAQ,kBAAkB,CAAC,ICJ9G,IAAAC,EAAmC,SAEtB,CAAE,MAAAC,EAAO,UAAAC,CAAU,KAAI,UAAO,cAAc,EACzDA,EAAW,EAAI,iCAEf,IAAMC,EAAW,8GAEbC,EACAC,EAISC,EAAU,IAAI,IAE3B,SAASC,EAASH,EAAiC,CAC/C,IAAMC,EAAe,SAAS,cAAc,OAAO,EACnD,OAAAA,EAAa,KAAO,WACfA,EAAqB,WAAaA,EAAqB,WAAW,QAAUD,EAC5EC,EAAa,YAAY,SAAS,eAAeD,CAAK,CAAC,EAE5D,SAAS,KAAK,YAAYC,CAAY,EAC/BA,CACX,CAEA,SAASG,GAAa,CACdH,GAAgBA,EAAa,YAC7BA,EAAa,WAAW,YAAYA,CAAY,CAExD,CAEA,eAAeI,EAAQC,EAAqC,CACxD,GAAI,CACA,IAAMC,EAAW,MAAM,MAAMD,CAAG,EAChC,GAAI,CAACC,EAAS,GACV,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAG5D,OADgB,MAAMA,EAAS,KAAK,CAExC,OAASC,EAAO,CACZ,OAAAX,EAAM,IAAI,IAAI,wBAAyBW,EAAgB,OAAO,EAAE,EACzD,IACX,CACJ,EAGC,UACGR,EAAQ,MAAMK,EAAQN,CAAQ,EAC1BC,IACAC,EAAeE,EAASH,CAAK,OAKrCE,EAAQ,IAAI,IAAM,CACdE,EAAW,EAEX,IAAMK,EAAoB,SAAS,cAAc,mCAAmC,CAKxF,CAAC",
  "names": ["require_core", "__commonJSMin", "exports", "module", "import_core", "trace", "errSignal", "themeUrl", "style", "styleElement", "unloads", "ApplyCSS", "CleanUpCSS", "HttpGet", "url", "response", "error", "trackTitleElement"]
}
